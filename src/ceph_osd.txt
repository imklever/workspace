OSD *osd = NULL;

void handle_osd_signal(int signum)
{
  if (osd)
    osd->handle_signal(signum);
}

static void usage()




int main(int argc, const char **argv)
{
  vector<const char*> args;



  argv_to_vec(argc, argv, args);
  env_to_vec(args);



  vector<const char*> def_args;
  def_args.push_back("--leveldb-log=");



  global_init(&def_args, args, CEPH_ENTITY_TYPE_OSD,CODE_ENVIRONMENT_DAEMON,0, "osd_data");



  ceph_heap_profiler_init();



  if (!args.empty()) {}



  if (get_journal_fsid) {}
  if (get_device_fsid) {
    ObjectStore::probe_block_device_fsid(g_ceph_context, device_path,&uuid);
    return 0;
  }



  if (!dump_pg_log.empty()) {
    common_init_finish(g_ceph_context);
    bl.read_file(dump_pg_log.c_str(), &error);
	::decode(e, p);
    return 0;
  }



  // whoami
  g_conf->name.get_id().c_str();



  if (g_conf->osd_data.empty()) {}



  // the store
  string store_type = g_conf->osd_objectstore;
  {
    g_conf->osd_data.c_str());
	g_conf->set_val("osd_objectstore", store_type);
  }
  ObjectStore *store = ObjectStore::create(g_ceph_context,store_type,g_conf->osd_data,g_conf->osd_journal,g_conf->osd_os_flags);



  if (mkkey) {
    common_init_finish(g_ceph_context);
    KeyRing::create_empty();

    EntityName ename(g_conf->name);
    EntityAuth eauth;

    keyring->load(g_ceph_context, g_conf->keyring);
    if (ret == 0 &&
	keyring->get_auth(ename, eauth)) {
    } else {
      eauth.key.create(g_ceph_context, CEPH_CRYPTO_AES);
      keyring->add(ename, eauth);
      keyring->encode_plaintext(bl);
      bl.write_file(g_conf->keyring.c_str(), 0600);
    }
  }



  if (mkfs) {
    common_init_finish(g_ceph_context);
    MonClient mc(g_ceph_context);
    mc.build_initial_monmap()
    mc.get_monmap_privately()

    OSD::mkfs(g_ceph_context, store, g_conf->osd_data,mc.monmap.fsid, whoami);
  }



  if (mkjournal) {
    common_init_finish(g_ceph_context);
    store->mkjournal();
    exit(0);
  }



  if (check_wants_journal) {
    store->wants_journal()
    exit(0);
  }



  if (check_allows_journal) {
    store->allows_journal())
    exit(0);
  }



  if (check_needs_journal) {
    store->needs_journal()
    exit(0);
  }



  if (flushjournal) {
    common_init_finish(g_ceph_context);
    store->mount();
    store->umount();
    delete store;
    exit(0);
  }



  if (dump_journal) {
    common_init_finish(g_ceph_context);
    store->dump_journal(cout);
    exit(0);

  }



  if (convertfilestore) {
    store->mount();
    store->upgrade();
    store->umount();
    exit(0);
  }
  


  string magic;
  OSD::peek_meta(store, magic, cluster_fsid, osd_fsid, w);



  if (get_cluster_fsid) {
    exit(0);
  }



  if (get_osd_fsid) {
    exit(0);
  }



  pick_addresses(g_ceph_context, CEPH_PICK_ADDRESS_PUBLIC|CEPH_PICK_ADDRESS_CLUSTER);



  std::string public_msgr_type = g_conf->ms_public_type.empty() ? g_conf->get_val<std::string>("ms_type") : g_conf->ms_public_type;
  std::string cluster_msgr_type = g_conf->ms_cluster_type.empty() ? g_conf->get_val<std::string>("ms_type") : g_conf->ms_cluster_type;



  Messenger *ms_public = Messenger::create(g_ceph_context, public_msgr_type,entity_name_t::OSD(whoami), "client",getpid(),Messenger::HAS_HEAVY_TRAFFIC |Messenger::HAS_MANY_CONNECTIONS);
  Messenger *ms_cluster = Messenger::create(g_ceph_context, cluster_msgr_type,entity_name_t::OSD(whoami), "cluster",getpid(),Messenger::HAS_HEAVY_TRAFFIC |Messenger::HAS_MANY_CONNECTIONS);
  Messenger *ms_hb_back_client = Messenger::create(g_ceph_context, cluster_msgr_type,entity_name_t::OSD(whoami), "hb_back_client",getpid(), Messenger::HEARTBEAT);
  Messenger *ms_hb_front_client = Messenger::create(g_ceph_context, public_msgr_type,entity_name_t::OSD(whoami), "hb_front_client",getpid(), Messenger::HEARTBEAT);
  Messenger *ms_hb_back_server = Messenger::create(g_ceph_context, cluster_msgr_type,entity_name_t::OSD(whoami), "hb_back_server",getpid(), Messenger::HEARTBEAT);
  Messenger *ms_hb_front_server = Messenger::create(g_ceph_context, public_msgr_type,entity_name_t::OSD(whoami), "hb_front_server",getpid(), Messenger::HEARTBEAT);
  Messenger *ms_objecter = Messenger::create(g_ceph_context, public_msgr_type,entity_name_t::OSD(whoami), "ms_objecter",getpid(), 0);



  ms_cluster->set_cluster_protocol(CEPH_OSD_PROTOCOL);
  ms_hb_front_client->set_cluster_protocol(CEPH_OSD_PROTOCOL);
  ms_hb_back_client->set_cluster_protocol(CEPH_OSD_PROTOCOL);
  ms_hb_back_server->set_cluster_protocol(CEPH_OSD_PROTOCOL);
  ms_hb_front_server->set_cluster_protocol(CEPH_OSD_PROTOCOL);



  boost::scoped_ptr<Throttle> client_byte_throttler(new Throttle(g_ceph_context, "osd_client_bytes",g_conf->osd_client_message_size_cap));



  // All feature bits 0 - 34 should be present from dumpling v0.67 forward
  uint64_t osd_required =CEPH_FEATURE_UID |CEPH_FEATURE_PGID64 |CEPH_FEATURE_OSDENC;



  ms_public->set_default_policy(Messenger::Policy::stateless_server(0));
  ms_public->set_policy_throttlers(entity_name_t::TYPE_CLIENT,client_byte_throttler.get(),nullptr);
  ms_public->set_policy(entity_name_t::TYPE_MON,Messenger::Policy::lossy_client(CEPH_FEATURE_UID |CEPH_FEATURE_PGID64 |CEPH_FEATURE_OSDENC));
  ms_public->set_policy(entity_name_t::TYPE_MGR,Messenger::Policy::lossy_client(CEPH_FEATURE_UID |CEPH_FEATURE_PGID64 |CEPH_FEATURE_OSDENC));
  //try to poison pill any OSD connections on the wrong address
  ms_public->set_policy(entity_name_t::TYPE_OSD,Messenger::Policy::stateless_server(0));



  ms_cluster->set_default_policy(Messenger::Policy::stateless_server(0));
  ms_cluster->set_policy(entity_name_t::TYPE_MON, Messenger::Policy::lossy_client(0));
  ms_cluster->set_policy(entity_name_t::TYPE_OSD,Messenger::Policy::lossless_peer(osd_required));
  ms_cluster->set_policy(entity_name_t::TYPE_CLIENT,Messenger::Policy::stateless_server(0));



  ms_hb_front_client->set_policy(entity_name_t::TYPE_OSD,Messenger::Policy::lossy_client(0));
  ms_hb_back_client->set_policy(entity_name_t::TYPE_OSD,Messenger::Policy::lossy_client(0));
  ms_hb_back_server->set_policy(entity_name_t::TYPE_OSD,Messenger::Policy::stateless_server(0));
  ms_hb_front_server->set_policy(entity_name_t::TYPE_OSD,Messenger::Policy::stateless_server(0));


  ms_objecter->set_default_policy(Messenger::Policy::lossy_client(CEPH_FEATURE_OSDREPLYMUX));



  ms_public->bind(g_conf->public_addr);
  ms_cluster->bind(g_conf->cluster_addr);



  if (g_conf->osd_heartbeat_use_min_delay_socket) {
    ms_hb_front_client->set_socket_priority(SOCKET_PRIORITY_MIN_DELAY);
    ms_hb_back_client->set_socket_priority(SOCKET_PRIORITY_MIN_DELAY);
    ms_hb_back_server->set_socket_priority(SOCKET_PRIORITY_MIN_DELAY);
    ms_hb_front_server->set_socket_priority(SOCKET_PRIORITY_MIN_DELAY);
  }



  ms_hb_back_server->bind(hb_back_addr);
  ms_hb_back_client->client_bind(hb_back_addr);
  ms_hb_front_server->bind(hb_front_addr);
  ms_hb_front_client->client_bind(hb_front_addr);



  // Set up crypto, daemonize, etc.
  global_init_daemonize(g_ceph_context);
  common_init_finish(g_ceph_context);



  TracepointProvider::initialize<osd_tracepoint_traits>(g_ceph_context);
  TracepointProvider::initialize<os_tracepoint_traits>(g_ceph_context);



  MonClient mc(g_ceph_context);
  mc.build_initial_monmap()
  global_init_chdir(g_ceph_context);






  osd = new OSD(g_ceph_context,
                store,
                whoami,
                ms_cluster,
                ms_public,
                ms_hb_front_client,
                ms_hb_back_client,
                ms_hb_front_server,
                ms_hb_back_server,
                ms_objecter,
                &mc,
                g_conf->osd_data,
                g_conf->osd_journal);




  osd->pre_init();



  ms_public->start();
  ms_hb_front_client->start();
  ms_hb_back_client->start();
  ms_hb_front_server->start();
  ms_hb_back_server->start();
  ms_cluster->start();
  ms_objecter->start();



  // start osd
  osd->init();



  // install signal handlers
  init_async_signal_handler();
  register_async_signal_handler(SIGHUP, sighup_handler);
  register_async_signal_handler_oneshot(SIGINT, handle_osd_signal);
  register_async_signal_handler_oneshot(SIGTERM, handle_osd_signal);




  osd->final_init();




  if (g_conf->inject_early_sigterm)
    kill(getpid(), SIGTERM);




  ms_public->wait();
  ms_hb_front_client->wait();
  ms_hb_back_client->wait();
  ms_hb_front_server->wait();
  ms_hb_back_server->wait();
  ms_cluster->wait();
  ms_objecter->wait();





  unregister_async_signal_handler(SIGHUP, sighup_handler);
  unregister_async_signal_handler(SIGINT, handle_osd_signal);
  unregister_async_signal_handler(SIGTERM, handle_osd_signal);
  shutdown_async_signal_handler();



  // done
  delete osd;
  delete ms_public;
  delete ms_hb_front_client;
  delete ms_hb_back_client;
  delete ms_hb_front_server;
  delete ms_hb_back_server;
  delete ms_cluster;
  delete ms_objecter;



  client_byte_throttler.reset();



  return 0;
}
